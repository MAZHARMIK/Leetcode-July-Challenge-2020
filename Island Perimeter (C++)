class Solution {
public:
    void dfs(vector<vector<int>> &grid, int i, int j, int& count, set<string>& st) {
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == 0) {
            count++;
            return;
        }

        string temp = to_string(i) + "_" + to_string(j);
        if(st.count(temp))
            return;

        st.insert(temp);

        dfs(grid, i-1, j, count, st);
        dfs(grid, i+1, j, count, st);
        dfs(grid, i, j-1, count, st);
        dfs(grid, i, j+1, count, st);
    }
    
    int islandPerimeter(vector<vector<int>>& grid) {
        int count = 0;
        set<string> st;
        bool flag = false;
        for(int i = 0; i<grid.size(); i++){
            for(int j = 0; j<grid[0].size(); j++){
                if(grid[i][j] == 1){
                    dfs(grid, i, j, count, st);
                    flag = true;
                    break;
                }
            }
            if(flag)
                break;
        }
        return count;
    }
};
