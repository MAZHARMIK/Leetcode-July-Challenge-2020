//Using DFS approach

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
public:
    Node* flatten(Node* head) {
        if(!head)
            return NULL;
        Node* curr = head;
        while(curr && curr->child == NULL)
            curr = curr->next;
        if(!curr)
            return head;
        Node* flattenedChild = flatten(curr->child);
        if(flattenedChild)
            flattenedChild->prev = curr;
        Node* temp = curr->next;
        curr->next = flattenedChild;
        curr->child = NULL;
        while(curr->next) {
            curr = curr->next;
        }
        curr->next = temp;
        if(temp)
            temp->prev = curr;
        return head;
    }
};
