Approach:1
Time Complexity : O(n)

class Solution {
public:
    int arrangeCoins(int n) {
        if(n == 0 || n == 1)
            return n;
        int temp = 0, remaining = n, result = 1;
        while(temp < n){
            temp += 1;
            remaining = remaining-temp;
            if(remaining > temp)
                result++;
            else
                break;
        }
        return result;
    }
};

---------------------------------------------------------------------------------
Approach:2
Time Complexity : O(n)

class Solution {
public:
    int arrangeCoins(int n) {
        if(n == 1 || n == 0)
            return n;
        int rowCoinNo = 1, result = 0;
        while(n >= rowCoinNo){
            n = n-rowCoinNo;
            rowCoinNo++;
            result++;
        }
        return result;
    }
};

---------------------------------------------------------------------------------
Approach:3 (Using Binary Search)
Time Complexity : O(log(n))

typedef long long int ll;
class Solution {
public:
    int arrangeCoins(int n) {
        ll l = 0, r = n;
        ll mid, sum;
        while(l<=r){
            mid = l + (r-l)/2;
            sum = mid*(mid+1)/2;
            if(sum > n)
                r = mid-1;
            else
                l = mid+1;
        }
        return l-1;
    }
};

---------------------------------------------------------------------------------
Approach:4 (Using Mathematical approach)
Time Complexity : O(1)

typedef long long int ll;
class Solution {
public:
    int arrangeCoins(int n) {
        ll k = sqrt((2*(ll)n) + 0.25) - 0.5;
        return k;
    }
};
